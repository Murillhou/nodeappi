#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http'),
  mongoose = require('mongoose'),
  path = require('path'),
  rootPath = require('app-root-path').toString(),
  logging = require(path.join(rootPath, 'app', 'components', 'logging'))('nodeappi'),
  log = logging.log,
  errorlog = logging.errorlog;

var app, port, server;
//Connect to the MongoDB database
mongoose.connect(
  process.env.MONGODB_URI, {
    useMongoClient: true,
    reconnectTries: Number.MAX_VALUE,
    reconnectInterval: 1000
  }, err => {
    (err) ? errorlog('--SERVER-- Error connecting to the database. ' + err): log('Connected to Database: ' + process.env.MONGODB_URI);
    app = require(path.join(rootPath.toString(), 'app', 'app'));
    /**
     * Get port from environment and store in Express.
     */
    port = normalizePort(process.env.PORT || '5000');
    app.set('port', port);
    /**
     * Create HTTP server.
     */
    server = http.createServer(app);
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if(isNaN(port)) {
    // named pipe
    return val;
  }

  if(port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch(error.code) {
    case 'EACCES':
      errorlog('--SERVER-- ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      errorlog('--SERVER-- ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  log('--SERVER-- Listening on ' + bind);
}